
@article{schuppan_enhancing_2016,
	title = {Enhancing unsatisfiable cores for {LTL} with information on temporal relevance},
	volume = {655},
	issn = {03043975},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S0304397516000256},
	doi = {10.1016/j.tcs.2016.01.014},
	language = {en},
	urldate = {2024-11-07},
	journal = {Theoretical Computer Science},
	author = {Schuppan, Viktor},
	month = dec,
	year = {2016},
	pages = {155--192},
	file = {Schuppan - 2016 - Enhancing unsatisfiable cores for LTL with informa.pdf:C\:\\Users\\esloa\\Zotero\\storage\\IINBCYE2\\Schuppan - 2016 - Enhancing unsatisfiable cores for LTL with informa.pdf:application/pdf},
}

@article{schuppan_towards_2012,
	title = {Towards a notion of unsatisfiable and unrealizable cores for {LTL}},
	volume = {77},
	copyright = {https://www.elsevier.com/tdm/userlicense/1.0/},
	issn = {01676423},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S0167642310002030},
	doi = {10.1016/j.scico.2010.11.004},
	abstract = {Unsatisfiable cores, i.e., parts of an unsatisfiable formula that are themselves unsatisfiable, have important uses in debugging specifications, speeding up search in model checking or SMT, and generating certificates of unsatisfiability. While unsatisfiable cores have been well investigated for Boolean SAT and constraint programming, the notion of unsatisfiable cores for temporal logics such as LTL has not received much attention. In this paper we investigate notions of unsatisfiable cores for LTL that arise from the syntax tree of an LTL formula, from converting it into a conjunctive normal form, and from proofs of its unsatisfiability. The resulting notions are more fine-grained than existing ones. We illustrate the benefits of the more fine-grained notions on examples from the literature. We extend some of the notions to realizability and we discuss the relationship of unsatisfiable and unrealizable cores with the notion of vacuity.},
	language = {en},
	number = {7-8},
	urldate = {2024-11-07},
	journal = {Science of Computer Programming},
	author = {Schuppan, Viktor},
	month = jul,
	year = {2012},
	pages = {908--939},
	file = {Schuppan - 2012 - Towards a notion of unsatisfiable and unrealizable.pdf:C\:\\Users\\esloa\\Zotero\\storage\\M2K67LVS\\Schuppan - 2012 - Towards a notion of unsatisfiable and unrealizable.pdf:application/pdf},
}

@article{roveri_computing_2024,
	title = {Computing unsatisfiable cores for {LTLf} specifications},
	volume = {80},
	issn = {1076-9757},
	url = {http://arxiv.org/abs/2203.04834},
	doi = {10.1613/jair.1.15313},
	abstract = {Linear-time temporal logic on ﬁnite traces (LTLf) is rapidly becoming a de-facto standard to produce speciﬁcations in many application domains (e.g., planning, business process management, run-time monitoring, reactive synthesis). Several studies approached the respective satisﬁability problem. In this paper, we investigate the problem of extracting the unsatisﬁable core in LTLf speciﬁcations. We provide four algorithms for extracting an unsatisﬁable core leveraging the adaptation of state-of-the-art approaches to LTLf satisﬁability checking. We implement the diﬀerent approaches within the respective tools and carry out an experimental evaluation on a set of reference benchmarks, restricting to the unsatisﬁable ones. The results show the feasibility, eﬀectiveness, and complementarities of the diﬀerent algorithms and tools.},
	language = {en},
	urldate = {2024-11-16},
	journal = {Journal of Artificial Intelligence Research},
	author = {Roveri, Marco and Ciccio, Claudio Di and Francescomarino, Chiara Di and Ghidini, Chiara},
	month = jun,
	year = {2024},
	note = {arXiv:2203.04834 [cs]},
	keywords = {Computer Science - Artificial Intelligence, Computer Science - Logic in Computer Science},
	pages = {517--558},
	file = {Roveri et al. - 2024 - Computing unsatisfiable cores for LTLf specificati.pdf:C\:\\Users\\esloa\\Zotero\\storage\\WCTYKJ2M\\Roveri et al. - 2024 - Computing unsatisfiable cores for LTLf specificati.pdf:application/pdf},
}

@misc{ielo_enumerating_2024,
	title = {Enumerating {Minimal} {Unsatisfiable} {Cores} of {LTLf} formulas},
	url = {http://arxiv.org/abs/2409.09485},
	abstract = {Linear Temporal Logic over finite traces (LTLf) is a widely used formalism with applications in AI, process mining, model checking, and more. The primary reasoning task for LTLf is satisfiability checking; yet, the recent focus on explainable AI has increased interest in analyzing inconsistent formulas, making the enumeration of minimal explanations for infeasibility a relevant task also for LTLf. This paper introduces a novel technique for enumerating minimal unsatisfiable cores (MUCs) of an LTLf specification. The main idea is to encode a LTLf formula into an Answer Set Programming (ASP) specification, such that the minimal unsatisfiable subsets (MUSes) of the ASP program directly correspond to the MUCs of the original LTLf specification. Leveraging recent advancements in ASP solving yields a MUC enumerator achieving good performance in experiments conducted on established benchmarks from the literature.},
	language = {en},
	urldate = {2024-11-16},
	publisher = {arXiv},
	author = {Ielo, Antonio and Mazzotta, Giuseppe and Peñaloza, Rafael and Ricca, Francesco},
	month = sep,
	year = {2024},
	note = {arXiv:2409.09485 [cs]},
	keywords = {Computer Science - Artificial Intelligence, Computer Science - Logic in Computer Science},
	file = {Ielo et al. - 2024 - Enumerating Minimal Unsatisfiable Cores of LTLf fo.pdf:C\:\\Users\\esloa\\Zotero\\storage\\2HQ23NLQ\\Ielo et al. - 2024 - Enumerating Minimal Unsatisfiable Cores of LTLf fo.pdf:application/pdf},
}

@article{niu_computing_2024,
	title = {Computing minimal unsatisfiable core for {LTL} over finite traces},
	volume = {34},
	copyright = {https://academic.oup.com/journals/pages/open\_access/funder\_policies/chorus/standard\_publication\_model},
	issn = {0955-792X, 1465-363X},
	url = {https://academic.oup.com/logcom/article/34/7/1274/7236710},
	doi = {10.1093/logcom/exad049},
	abstract = {In this paper, we consider the minimal unsatisfiable core (MUC) problem for linear temporal logic over finite traces (LTLf ), which nowadays is a popular formal-specification language for AI-related systems. Efficient algorithms to compute such MUCs can help locate the inconsistency rapidly in the written LTLf specification and are very useful for the system designers to amend the f lawed requirement. As far as we know, there are no available tools off-the-shelf so far that provide MUC computation for LTLf . We present here two generic approaches NaiveMUC and BinaryMUC to compute an MUC for LTLf . Moreover, we introduce heuristics that are based on the Boolean unsatisfiable core (UC) technique to accelerate the two approaches, which are named NaiveMUC+UC and BinaryMUC+UC, respectively. In particular, for global LTLf formulas, we show that the MUC computation can be reduced to the pure Boolean MUC computation, which therefore conducts the GlobalMUC approach. Our experiments show that GlobalMUC performs the best to compute an MUC for global formulas, and BinaryMUC+UC is the best for an arbitrary unsatisfiable formula.},
	language = {en},
	number = {7},
	urldate = {2024-11-16},
	journal = {Journal of Logic and Computation},
	author = {Niu, Tong and Xiao, Shengping and Zhang, Xiaoyu and Li, Jianwen and Huang, Yanhong and Shi, Jianqi},
	month = oct,
	year = {2024},
	pages = {1274--1294},
	file = {Niu et al. - 2024 - Computing minimal unsatisfiable core for LTL over .pdf:C\:\\Users\\esloa\\Zotero\\storage\\SY59R6AY\\Niu et al. - 2024 - Computing minimal unsatisfiable core for LTL over .pdf:application/pdf},
}

@article{sergeant_finding_nodate,
	title = {Finding {Minimal} {Unsatisﬁable} {Subsets} in {Linear} {Temporal} {Logic} using {BDDs}},
	abstract = {When writing speciﬁcations in linear temporal logic, it is common for human error to introduce unsatisﬁability into the knowledge base, preventing any reasoning from being performed. Due to the complexity of this problem, such an error is diﬃcult to diagnose by hand. This paper describes an algorithm which can be used to reduce an unsatisﬁable PLTL speciﬁcation into a minimal unsatisﬁable subset of the input, thereby removing any formulae which do not directly contribute to the unsatisﬁability. Reducing the input in this way allows the source of the error to be more easily diagnosed. The method presented uses binary decision diagrams (BDDs) as an eﬃcient way to store satisﬁability information about the input set, and requires only a single call to a BDD-based theorem prover to operate.},
	language = {en},
	author = {Sergeant, Timothy and Gore, Rajeev and Thomson, Jimmy},
	file = {Sergeant et al. - Finding Minimal Unsatisﬁable Subsets in Linear Tem.pdf:C\:\\Users\\esloa\\Zotero\\storage\\7EWXKG58\\Sergeant et al. - Finding Minimal Unsatisﬁable Subsets in Linear Tem.pdf:application/pdf},
}

@inproceedings{degiovanni2018genetic,
  title={A genetic algorithm for goal-conflict identification},
  author={Degiovanni, Renzo and Molina, Facundo and Regis, Germ{\'a}n and Aguirre, Nazareno},
  booktitle={Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering},
  pages={520--531},
  year={2018}
}

@inproceedings{degiovanni2016goal,
  title={Goal-conflict detection based on temporal satisfiability checking},
  author={Degiovanni, Renzo and Ricci, Nicol{\'a}s and Alrajeh, Dalal and Castro, Pablo and Aguirre, Nazareno},
  booktitle={Proceedings of the 31st IEEE/ACM International Conference on Automated Software Engineering},
  pages={507--518},
  year={2016}
}

@inproceedings{shlyakhter2003debugging,
  title={Debugging overconstrained declarative models using unsatisfiable cores},
  author={Shlyakhter, Ilya and Seater, Robert and Jackson, Daniel and Sridharan, Manu and Taghdiri, Mana},
  booktitle={18th IEEE International Conference on Automated Software Engineering, 2003. Proceedings.},
  pages={94--105},
  year={2003},
  organization={IEEE}
}

@misc{standards2016ieee,
  title={IEEE Recommended Practice for Software Requirements Specifications. IEEE Std 830 1998},
  author={Standards Association and others},
  year={2016}
}

@inproceedings{luo2021identify,
  title={How to identify boundary conditions with contrasty metric?},
  author={Luo, Weilin and Wan, Hai and Song, Xiaotong and Yang, Binhao and Zhong, Hongzhen and Chen, Yin},
  booktitle={2021 IEEE/ACM 43rd International Conference on Software Engineering (ICSE)},
  pages={1473--1484},
  year={2021},
  organization={IEEE}
}
